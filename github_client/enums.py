# Generated by ariadne-codegen on 2023-09-01 12:40
# Source: schema/github_api.schema

from enum import Enum


class ActorType(str, Enum):
    TEAM = "TEAM"
    USER = "USER"


class AuditLogOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class CheckAnnotationLevel(str, Enum):
    FAILURE = "FAILURE"
    NOTICE = "NOTICE"
    WARNING = "WARNING"


class CheckConclusionState(str, Enum):
    ACTION_REQUIRED = "ACTION_REQUIRED"
    CANCELLED = "CANCELLED"
    FAILURE = "FAILURE"
    NEUTRAL = "NEUTRAL"
    SKIPPED = "SKIPPED"
    STALE = "STALE"
    STARTUP_FAILURE = "STARTUP_FAILURE"
    SUCCESS = "SUCCESS"
    TIMED_OUT = "TIMED_OUT"


class CheckRunState(str, Enum):
    ACTION_REQUIRED = "ACTION_REQUIRED"
    CANCELLED = "CANCELLED"
    COMPLETED = "COMPLETED"
    FAILURE = "FAILURE"
    IN_PROGRESS = "IN_PROGRESS"
    NEUTRAL = "NEUTRAL"
    PENDING = "PENDING"
    QUEUED = "QUEUED"
    SKIPPED = "SKIPPED"
    STALE = "STALE"
    STARTUP_FAILURE = "STARTUP_FAILURE"
    SUCCESS = "SUCCESS"
    TIMED_OUT = "TIMED_OUT"
    WAITING = "WAITING"


class CheckRunType(str, Enum):
    ALL = "ALL"
    LATEST = "LATEST"


class CheckStatusState(str, Enum):
    COMPLETED = "COMPLETED"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    QUEUED = "QUEUED"
    REQUESTED = "REQUESTED"
    WAITING = "WAITING"


class CollaboratorAffiliation(str, Enum):
    ALL = "ALL"
    DIRECT = "DIRECT"
    OUTSIDE = "OUTSIDE"


class CommentAuthorAssociation(str, Enum):
    COLLABORATOR = "COLLABORATOR"
    CONTRIBUTOR = "CONTRIBUTOR"
    FIRST_TIMER = "FIRST_TIMER"
    FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
    MANNEQUIN = "MANNEQUIN"
    MEMBER = "MEMBER"
    NONE = "NONE"
    OWNER = "OWNER"


class CommentCannotUpdateReason(str, Enum):
    ARCHIVED = "ARCHIVED"
    DENIED = "DENIED"
    INSUFFICIENT_ACCESS = "INSUFFICIENT_ACCESS"
    LOCKED = "LOCKED"
    LOGIN_REQUIRED = "LOGIN_REQUIRED"
    MAINTENANCE = "MAINTENANCE"
    VERIFIED_EMAIL_REQUIRED = "VERIFIED_EMAIL_REQUIRED"


class CommitContributionOrderField(str, Enum):
    COMMIT_COUNT = "COMMIT_COUNT"
    OCCURRED_AT = "OCCURRED_AT"


class ComparisonStatus(str, Enum):
    AHEAD = "AHEAD"
    BEHIND = "BEHIND"
    DIVERGED = "DIVERGED"
    IDENTICAL = "IDENTICAL"


class ContributionLevel(str, Enum):
    FIRST_QUARTILE = "FIRST_QUARTILE"
    FOURTH_QUARTILE = "FOURTH_QUARTILE"
    NONE = "NONE"
    SECOND_QUARTILE = "SECOND_QUARTILE"
    THIRD_QUARTILE = "THIRD_QUARTILE"


class DefaultRepositoryPermissionField(str, Enum):
    ADMIN = "ADMIN"
    NONE = "NONE"
    READ = "READ"
    WRITE = "WRITE"


class DependencyGraphEcosystem(str, Enum):
    ACTIONS = "ACTIONS"
    COMPOSER = "COMPOSER"
    GO = "GO"
    MAVEN = "MAVEN"
    NPM = "NPM"
    NUGET = "NUGET"
    PIP = "PIP"
    PUB = "PUB"
    RUBYGEMS = "RUBYGEMS"
    RUST = "RUST"
    SWIFT = "SWIFT"


class DeploymentOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class DeploymentProtectionRuleType(str, Enum):
    REQUIRED_REVIEWERS = "REQUIRED_REVIEWERS"
    WAIT_TIMER = "WAIT_TIMER"


class DeploymentReviewState(str, Enum):
    APPROVED = "APPROVED"
    REJECTED = "REJECTED"


class DeploymentState(str, Enum):
    ABANDONED = "ABANDONED"
    ACTIVE = "ACTIVE"
    DESTROYED = "DESTROYED"
    ERROR = "ERROR"
    FAILURE = "FAILURE"
    INACTIVE = "INACTIVE"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    QUEUED = "QUEUED"
    SUCCESS = "SUCCESS"
    WAITING = "WAITING"


class DeploymentStatusState(str, Enum):
    ERROR = "ERROR"
    FAILURE = "FAILURE"
    INACTIVE = "INACTIVE"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    QUEUED = "QUEUED"
    SUCCESS = "SUCCESS"
    WAITING = "WAITING"


class DiffSide(str, Enum):
    LEFT = "LEFT"
    RIGHT = "RIGHT"


class DiscussionCloseReason(str, Enum):
    DUPLICATE = "DUPLICATE"
    OUTDATED = "OUTDATED"
    RESOLVED = "RESOLVED"


class DiscussionOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    UPDATED_AT = "UPDATED_AT"


class DiscussionPollOptionOrderField(str, Enum):
    AUTHORED_ORDER = "AUTHORED_ORDER"
    VOTE_COUNT = "VOTE_COUNT"


class DiscussionState(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class DiscussionStateReason(str, Enum):
    DUPLICATE = "DUPLICATE"
    OUTDATED = "OUTDATED"
    REOPENED = "REOPENED"
    RESOLVED = "RESOLVED"


class DismissReason(str, Enum):
    FIX_STARTED = "FIX_STARTED"
    INACCURATE = "INACCURATE"
    NOT_USED = "NOT_USED"
    NO_BANDWIDTH = "NO_BANDWIDTH"
    TOLERABLE_RISK = "TOLERABLE_RISK"


class EnterpriseAdministratorInvitationOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class EnterpriseAdministratorRole(str, Enum):
    BILLING_MANAGER = "BILLING_MANAGER"
    OWNER = "OWNER"


class EnterpriseAllowPrivateRepositoryForkingPolicyValue(str, Enum):
    ENTERPRISE_ORGANIZATIONS = "ENTERPRISE_ORGANIZATIONS"
    ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS"
    EVERYWHERE = "EVERYWHERE"
    SAME_ORGANIZATION = "SAME_ORGANIZATION"
    SAME_ORGANIZATION_USER_ACCOUNTS = "SAME_ORGANIZATION_USER_ACCOUNTS"
    USER_ACCOUNTS = "USER_ACCOUNTS"


class EnterpriseDefaultRepositoryPermissionSettingValue(str, Enum):
    ADMIN = "ADMIN"
    NONE = "NONE"
    NO_POLICY = "NO_POLICY"
    READ = "READ"
    WRITE = "WRITE"


class EnterpriseEnabledDisabledSettingValue(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"
    NO_POLICY = "NO_POLICY"


class EnterpriseEnabledSettingValue(str, Enum):
    ENABLED = "ENABLED"
    NO_POLICY = "NO_POLICY"


class EnterpriseMemberOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    LOGIN = "LOGIN"


class EnterpriseMembersCanCreateRepositoriesSettingValue(str, Enum):
    ALL = "ALL"
    DISABLED = "DISABLED"
    NO_POLICY = "NO_POLICY"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class EnterpriseMembersCanMakePurchasesSettingValue(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class EnterpriseServerInstallationOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    CUSTOMER_NAME = "CUSTOMER_NAME"
    HOST_NAME = "HOST_NAME"


class EnterpriseServerUserAccountEmailOrderField(str, Enum):
    EMAIL = "EMAIL"


class EnterpriseServerUserAccountOrderField(str, Enum):
    LOGIN = "LOGIN"
    REMOTE_CREATED_AT = "REMOTE_CREATED_AT"


class EnterpriseServerUserAccountsUploadOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class EnterpriseServerUserAccountsUploadSyncState(str, Enum):
    FAILURE = "FAILURE"
    PENDING = "PENDING"
    SUCCESS = "SUCCESS"


class EnterpriseUserAccountMembershipRole(str, Enum):
    MEMBER = "MEMBER"
    OWNER = "OWNER"
    UNAFFILIATED = "UNAFFILIATED"


class EnterpriseUserDeployment(str, Enum):
    CLOUD = "CLOUD"
    SERVER = "SERVER"


class EnvironmentOrderField(str, Enum):
    NAME = "NAME"


class FileViewedState(str, Enum):
    DISMISSED = "DISMISSED"
    UNVIEWED = "UNVIEWED"
    VIEWED = "VIEWED"


class FundingPlatform(str, Enum):
    COMMUNITY_BRIDGE = "COMMUNITY_BRIDGE"
    CUSTOM = "CUSTOM"
    GITHUB = "GITHUB"
    ISSUEHUNT = "ISSUEHUNT"
    KO_FI = "KO_FI"
    LFX_CROWDFUNDING = "LFX_CROWDFUNDING"
    LIBERAPAY = "LIBERAPAY"
    OPEN_COLLECTIVE = "OPEN_COLLECTIVE"
    OTECHIE = "OTECHIE"
    PATREON = "PATREON"
    TIDELIFT = "TIDELIFT"


class GistOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    PUSHED_AT = "PUSHED_AT"
    UPDATED_AT = "UPDATED_AT"


class GistPrivacy(str, Enum):
    ALL = "ALL"
    PUBLIC = "PUBLIC"
    SECRET = "SECRET"


class GitSignatureState(str, Enum):
    BAD_CERT = "BAD_CERT"
    BAD_EMAIL = "BAD_EMAIL"
    EXPIRED_KEY = "EXPIRED_KEY"
    GPGVERIFY_ERROR = "GPGVERIFY_ERROR"
    GPGVERIFY_UNAVAILABLE = "GPGVERIFY_UNAVAILABLE"
    INVALID = "INVALID"
    MALFORMED_SIG = "MALFORMED_SIG"
    NOT_SIGNING_KEY = "NOT_SIGNING_KEY"
    NO_USER = "NO_USER"
    OCSP_ERROR = "OCSP_ERROR"
    OCSP_PENDING = "OCSP_PENDING"
    OCSP_REVOKED = "OCSP_REVOKED"
    UNKNOWN_KEY = "UNKNOWN_KEY"
    UNKNOWN_SIG_TYPE = "UNKNOWN_SIG_TYPE"
    UNSIGNED = "UNSIGNED"
    UNVERIFIED_EMAIL = "UNVERIFIED_EMAIL"
    VALID = "VALID"


class IdentityProviderConfigurationState(str, Enum):
    CONFIGURED = "CONFIGURED"
    ENFORCED = "ENFORCED"
    UNCONFIGURED = "UNCONFIGURED"


class IpAllowListEnabledSettingValue(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class IpAllowListEntryOrderField(str, Enum):
    ALLOW_LIST_VALUE = "ALLOW_LIST_VALUE"
    CREATED_AT = "CREATED_AT"


class IpAllowListForInstalledAppsEnabledSettingValue(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class IssueClosedStateReason(str, Enum):
    COMPLETED = "COMPLETED"
    NOT_PLANNED = "NOT_PLANNED"


class IssueCommentOrderField(str, Enum):
    UPDATED_AT = "UPDATED_AT"


class IssueOrderField(str, Enum):
    COMMENTS = "COMMENTS"
    CREATED_AT = "CREATED_AT"
    UPDATED_AT = "UPDATED_AT"


class IssueState(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class IssueStateReason(str, Enum):
    COMPLETED = "COMPLETED"
    NOT_PLANNED = "NOT_PLANNED"
    REOPENED = "REOPENED"


class IssueTimelineItemsItemType(str, Enum):
    ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT"
    ASSIGNED_EVENT = "ASSIGNED_EVENT"
    CLOSED_EVENT = "CLOSED_EVENT"
    COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT"
    CONNECTED_EVENT = "CONNECTED_EVENT"
    CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT"
    CONVERTED_TO_DISCUSSION_EVENT = "CONVERTED_TO_DISCUSSION_EVENT"
    CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT"
    DEMILESTONED_EVENT = "DEMILESTONED_EVENT"
    DISCONNECTED_EVENT = "DISCONNECTED_EVENT"
    ISSUE_COMMENT = "ISSUE_COMMENT"
    LABELED_EVENT = "LABELED_EVENT"
    LOCKED_EVENT = "LOCKED_EVENT"
    MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT"
    MENTIONED_EVENT = "MENTIONED_EVENT"
    MILESTONED_EVENT = "MILESTONED_EVENT"
    MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT"
    PINNED_EVENT = "PINNED_EVENT"
    REFERENCED_EVENT = "REFERENCED_EVENT"
    REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT"
    RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT"
    REOPENED_EVENT = "REOPENED_EVENT"
    SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT"
    TRANSFERRED_EVENT = "TRANSFERRED_EVENT"
    UNASSIGNED_EVENT = "UNASSIGNED_EVENT"
    UNLABELED_EVENT = "UNLABELED_EVENT"
    UNLOCKED_EVENT = "UNLOCKED_EVENT"
    UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT"
    UNPINNED_EVENT = "UNPINNED_EVENT"
    UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT"
    USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT"


class LabelOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"


class LanguageOrderField(str, Enum):
    SIZE = "SIZE"


class LockReason(str, Enum):
    OFF_TOPIC = "OFF_TOPIC"
    RESOLVED = "RESOLVED"
    SPAM = "SPAM"
    TOO_HEATED = "TOO_HEATED"


class MannequinOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    LOGIN = "LOGIN"


class MergeCommitMessage(str, Enum):
    BLANK = "BLANK"
    PR_BODY = "PR_BODY"
    PR_TITLE = "PR_TITLE"


class MergeCommitTitle(str, Enum):
    MERGE_MESSAGE = "MERGE_MESSAGE"
    PR_TITLE = "PR_TITLE"


class MergeQueueEntryState(str, Enum):
    AWAITING_CHECKS = "AWAITING_CHECKS"
    LOCKED = "LOCKED"
    MERGEABLE = "MERGEABLE"
    QUEUED = "QUEUED"
    UNMERGEABLE = "UNMERGEABLE"


class MergeQueueMergingStrategy(str, Enum):
    ALLGREEN = "ALLGREEN"
    HEADGREEN = "HEADGREEN"


class MergeStateStatus(str, Enum):
    BEHIND = "BEHIND"
    BLOCKED = "BLOCKED"
    CLEAN = "CLEAN"
    DIRTY = "DIRTY"
    DRAFT = "DRAFT"
    HAS_HOOKS = "HAS_HOOKS"
    UNKNOWN = "UNKNOWN"
    UNSTABLE = "UNSTABLE"


class MergeableState(str, Enum):
    CONFLICTING = "CONFLICTING"
    MERGEABLE = "MERGEABLE"
    UNKNOWN = "UNKNOWN"


class MigrationSourceType(str, Enum):
    AZURE_DEVOPS = "AZURE_DEVOPS"
    BITBUCKET_SERVER = "BITBUCKET_SERVER"
    GITHUB_ARCHIVE = "GITHUB_ARCHIVE"


class MigrationState(str, Enum):
    FAILED = "FAILED"
    FAILED_VALIDATION = "FAILED_VALIDATION"
    IN_PROGRESS = "IN_PROGRESS"
    NOT_STARTED = "NOT_STARTED"
    PENDING_VALIDATION = "PENDING_VALIDATION"
    QUEUED = "QUEUED"
    SUCCEEDED = "SUCCEEDED"


class MilestoneOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    DUE_DATE = "DUE_DATE"
    NUMBER = "NUMBER"
    UPDATED_AT = "UPDATED_AT"


class MilestoneState(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class NotificationRestrictionSettingValue(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class OIDCProviderType(str, Enum):
    AAD = "AAD"


class OauthApplicationCreateAuditEntryState(str, Enum):
    ACTIVE = "ACTIVE"
    PENDING_DELETION = "PENDING_DELETION"
    SUSPENDED = "SUSPENDED"


class OperationType(str, Enum):
    ACCESS = "ACCESS"
    AUTHENTICATION = "AUTHENTICATION"
    CREATE = "CREATE"
    MODIFY = "MODIFY"
    REMOVE = "REMOVE"
    RESTORE = "RESTORE"
    TRANSFER = "TRANSFER"


class OrderDirection(str, Enum):
    ASC = "ASC"
    DESC = "DESC"


class OrgAddMemberAuditEntryPermission(str, Enum):
    ADMIN = "ADMIN"
    READ = "READ"


class OrgCreateAuditEntryBillingPlan(str, Enum):
    BUSINESS = "BUSINESS"
    BUSINESS_PLUS = "BUSINESS_PLUS"
    FREE = "FREE"
    TIERED_PER_SEAT = "TIERED_PER_SEAT"
    UNLIMITED = "UNLIMITED"


class OrgEnterpriseOwnerOrderField(str, Enum):
    LOGIN = "LOGIN"


class OrgRemoveBillingManagerAuditEntryReason(str, Enum):
    SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING"
    SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
    TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"


class OrgRemoveMemberAuditEntryMembershipType(str, Enum):
    ADMIN = "ADMIN"
    BILLING_MANAGER = "BILLING_MANAGER"
    DIRECT_MEMBER = "DIRECT_MEMBER"
    OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR"
    SUSPENDED = "SUSPENDED"
    UNAFFILIATED = "UNAFFILIATED"


class OrgRemoveMemberAuditEntryReason(str, Enum):
    SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING"
    SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
    TWO_FACTOR_ACCOUNT_RECOVERY = "TWO_FACTOR_ACCOUNT_RECOVERY"
    TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"
    USER_ACCOUNT_DELETED = "USER_ACCOUNT_DELETED"


class OrgRemoveOutsideCollaboratorAuditEntryMembershipType(str, Enum):
    BILLING_MANAGER = "BILLING_MANAGER"
    OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR"
    UNAFFILIATED = "UNAFFILIATED"


class OrgRemoveOutsideCollaboratorAuditEntryReason(str, Enum):
    SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING"
    TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE"


class OrgUpdateDefaultRepositoryPermissionAuditEntryPermission(str, Enum):
    ADMIN = "ADMIN"
    NONE = "NONE"
    READ = "READ"
    WRITE = "WRITE"


class OrgUpdateMemberAuditEntryPermission(str, Enum):
    ADMIN = "ADMIN"
    READ = "READ"


class OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility(str, Enum):
    ALL = "ALL"
    INTERNAL = "INTERNAL"
    NONE = "NONE"
    PRIVATE = "PRIVATE"
    PRIVATE_INTERNAL = "PRIVATE_INTERNAL"
    PUBLIC = "PUBLIC"
    PUBLIC_INTERNAL = "PUBLIC_INTERNAL"
    PUBLIC_PRIVATE = "PUBLIC_PRIVATE"


class OrganizationInvitationRole(str, Enum):
    ADMIN = "ADMIN"
    BILLING_MANAGER = "BILLING_MANAGER"
    DIRECT_MEMBER = "DIRECT_MEMBER"
    REINSTATE = "REINSTATE"


class OrganizationInvitationSource(str, Enum):
    MEMBER = "MEMBER"
    SCIM = "SCIM"
    UNKNOWN = "UNKNOWN"


class OrganizationInvitationType(str, Enum):
    EMAIL = "EMAIL"
    USER = "USER"


class OrganizationMemberRole(str, Enum):
    ADMIN = "ADMIN"
    MEMBER = "MEMBER"


class OrganizationMembersCanCreateRepositoriesSettingValue(str, Enum):
    ALL = "ALL"
    DISABLED = "DISABLED"
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"


class OrganizationMigrationState(str, Enum):
    FAILED = "FAILED"
    FAILED_VALIDATION = "FAILED_VALIDATION"
    IN_PROGRESS = "IN_PROGRESS"
    NOT_STARTED = "NOT_STARTED"
    PENDING_VALIDATION = "PENDING_VALIDATION"
    POST_REPO_MIGRATION = "POST_REPO_MIGRATION"
    PRE_REPO_MIGRATION = "PRE_REPO_MIGRATION"
    QUEUED = "QUEUED"
    REPO_MIGRATION = "REPO_MIGRATION"
    SUCCEEDED = "SUCCEEDED"


class OrganizationOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    LOGIN = "LOGIN"


class PackageFileOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class PackageOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class PackageType(str, Enum):
    DEBIAN = "DEBIAN"
    DOCKER = "DOCKER"
    MAVEN = "MAVEN"
    NPM = "NPM"
    NUGET = "NUGET"
    PYPI = "PYPI"
    RUBYGEMS = "RUBYGEMS"


class PackageVersionOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class PatchStatus(str, Enum):
    ADDED = "ADDED"
    CHANGED = "CHANGED"
    COPIED = "COPIED"
    DELETED = "DELETED"
    MODIFIED = "MODIFIED"
    RENAMED = "RENAMED"


class PinnableItemType(str, Enum):
    GIST = "GIST"
    ISSUE = "ISSUE"
    ORGANIZATION = "ORGANIZATION"
    PROJECT = "PROJECT"
    PULL_REQUEST = "PULL_REQUEST"
    REPOSITORY = "REPOSITORY"
    TEAM = "TEAM"
    USER = "USER"


class PinnedDiscussionGradient(str, Enum):
    BLUE_MINT = "BLUE_MINT"
    BLUE_PURPLE = "BLUE_PURPLE"
    PINK_BLUE = "PINK_BLUE"
    PURPLE_CORAL = "PURPLE_CORAL"
    RED_ORANGE = "RED_ORANGE"


class PinnedDiscussionPattern(str, Enum):
    CHEVRON_UP = "CHEVRON_UP"
    DOT = "DOT"
    DOT_FILL = "DOT_FILL"
    HEART_FILL = "HEART_FILL"
    PLUS = "PLUS"
    ZAP = "ZAP"


class ProjectCardArchivedState(str, Enum):
    ARCHIVED = "ARCHIVED"
    NOT_ARCHIVED = "NOT_ARCHIVED"


class ProjectCardState(str, Enum):
    CONTENT_ONLY = "CONTENT_ONLY"
    NOTE_ONLY = "NOTE_ONLY"
    REDACTED = "REDACTED"


class ProjectColumnPurpose(str, Enum):
    DONE = "DONE"
    IN_PROGRESS = "IN_PROGRESS"
    TODO = "TODO"


class ProjectOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"
    UPDATED_AT = "UPDATED_AT"


class ProjectState(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class ProjectTemplate(str, Enum):
    AUTOMATED_KANBAN_V2 = "AUTOMATED_KANBAN_V2"
    AUTOMATED_REVIEWS_KANBAN = "AUTOMATED_REVIEWS_KANBAN"
    BASIC_KANBAN = "BASIC_KANBAN"
    BUG_TRIAGE = "BUG_TRIAGE"


class ProjectV2CustomFieldType(str, Enum):
    DATE = "DATE"
    NUMBER = "NUMBER"
    SINGLE_SELECT = "SINGLE_SELECT"
    TEXT = "TEXT"


class ProjectV2FieldOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"
    POSITION = "POSITION"


class ProjectV2FieldType(str, Enum):
    ASSIGNEES = "ASSIGNEES"
    DATE = "DATE"
    ITERATION = "ITERATION"
    LABELS = "LABELS"
    LINKED_PULL_REQUESTS = "LINKED_PULL_REQUESTS"
    MILESTONE = "MILESTONE"
    NUMBER = "NUMBER"
    REPOSITORY = "REPOSITORY"
    REVIEWERS = "REVIEWERS"
    SINGLE_SELECT = "SINGLE_SELECT"
    TEXT = "TEXT"
    TITLE = "TITLE"
    TRACKED_BY = "TRACKED_BY"
    TRACKS = "TRACKS"


class ProjectV2ItemFieldValueOrderField(str, Enum):
    POSITION = "POSITION"


class ProjectV2ItemOrderField(str, Enum):
    POSITION = "POSITION"


class ProjectV2ItemType(str, Enum):
    DRAFT_ISSUE = "DRAFT_ISSUE"
    ISSUE = "ISSUE"
    PULL_REQUEST = "PULL_REQUEST"
    REDACTED = "REDACTED"


class ProjectV2OrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NUMBER = "NUMBER"
    TITLE = "TITLE"
    UPDATED_AT = "UPDATED_AT"


class ProjectV2Roles(str, Enum):
    ADMIN = "ADMIN"
    NONE = "NONE"
    READER = "READER"
    WRITER = "WRITER"


class ProjectV2SingleSelectFieldOptionColor(str, Enum):
    BLUE = "BLUE"
    GRAY = "GRAY"
    GREEN = "GREEN"
    ORANGE = "ORANGE"
    PINK = "PINK"
    PURPLE = "PURPLE"
    RED = "RED"
    YELLOW = "YELLOW"


class ProjectV2State(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class ProjectV2ViewLayout(str, Enum):
    BOARD_LAYOUT = "BOARD_LAYOUT"
    ROADMAP_LAYOUT = "ROADMAP_LAYOUT"
    TABLE_LAYOUT = "TABLE_LAYOUT"


class ProjectV2ViewOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"
    POSITION = "POSITION"


class ProjectV2WorkflowsOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"
    NUMBER = "NUMBER"
    UPDATED_AT = "UPDATED_AT"


class PullRequestBranchUpdateMethod(str, Enum):
    MERGE = "MERGE"
    REBASE = "REBASE"


class PullRequestMergeMethod(str, Enum):
    MERGE = "MERGE"
    REBASE = "REBASE"
    SQUASH = "SQUASH"


class PullRequestOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    UPDATED_AT = "UPDATED_AT"


class PullRequestReviewCommentState(str, Enum):
    PENDING = "PENDING"
    SUBMITTED = "SUBMITTED"


class PullRequestReviewDecision(str, Enum):
    APPROVED = "APPROVED"
    CHANGES_REQUESTED = "CHANGES_REQUESTED"
    REVIEW_REQUIRED = "REVIEW_REQUIRED"


class PullRequestReviewEvent(str, Enum):
    APPROVE = "APPROVE"
    COMMENT = "COMMENT"
    DISMISS = "DISMISS"
    REQUEST_CHANGES = "REQUEST_CHANGES"


class PullRequestReviewState(str, Enum):
    APPROVED = "APPROVED"
    CHANGES_REQUESTED = "CHANGES_REQUESTED"
    COMMENTED = "COMMENTED"
    DISMISSED = "DISMISSED"
    PENDING = "PENDING"


class PullRequestReviewThreadSubjectType(str, Enum):
    FILE = "FILE"
    LINE = "LINE"


class PullRequestState(str, Enum):
    CLOSED = "CLOSED"
    MERGED = "MERGED"
    OPEN = "OPEN"


class PullRequestTimelineItemsItemType(str, Enum):
    ADDED_TO_MERGE_QUEUE_EVENT = "ADDED_TO_MERGE_QUEUE_EVENT"
    ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT"
    ASSIGNED_EVENT = "ASSIGNED_EVENT"
    AUTOMATIC_BASE_CHANGE_FAILED_EVENT = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT"
    AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT"
    AUTO_MERGE_DISABLED_EVENT = "AUTO_MERGE_DISABLED_EVENT"
    AUTO_MERGE_ENABLED_EVENT = "AUTO_MERGE_ENABLED_EVENT"
    AUTO_REBASE_ENABLED_EVENT = "AUTO_REBASE_ENABLED_EVENT"
    AUTO_SQUASH_ENABLED_EVENT = "AUTO_SQUASH_ENABLED_EVENT"
    BASE_REF_CHANGED_EVENT = "BASE_REF_CHANGED_EVENT"
    BASE_REF_DELETED_EVENT = "BASE_REF_DELETED_EVENT"
    BASE_REF_FORCE_PUSHED_EVENT = "BASE_REF_FORCE_PUSHED_EVENT"
    CLOSED_EVENT = "CLOSED_EVENT"
    COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT"
    CONNECTED_EVENT = "CONNECTED_EVENT"
    CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT"
    CONVERTED_TO_DISCUSSION_EVENT = "CONVERTED_TO_DISCUSSION_EVENT"
    CONVERT_TO_DRAFT_EVENT = "CONVERT_TO_DRAFT_EVENT"
    CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT"
    DEMILESTONED_EVENT = "DEMILESTONED_EVENT"
    DEPLOYED_EVENT = "DEPLOYED_EVENT"
    DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT"
    DISCONNECTED_EVENT = "DISCONNECTED_EVENT"
    HEAD_REF_DELETED_EVENT = "HEAD_REF_DELETED_EVENT"
    HEAD_REF_FORCE_PUSHED_EVENT = "HEAD_REF_FORCE_PUSHED_EVENT"
    HEAD_REF_RESTORED_EVENT = "HEAD_REF_RESTORED_EVENT"
    ISSUE_COMMENT = "ISSUE_COMMENT"
    LABELED_EVENT = "LABELED_EVENT"
    LOCKED_EVENT = "LOCKED_EVENT"
    MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT"
    MENTIONED_EVENT = "MENTIONED_EVENT"
    MERGED_EVENT = "MERGED_EVENT"
    MILESTONED_EVENT = "MILESTONED_EVENT"
    MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT"
    PINNED_EVENT = "PINNED_EVENT"
    PULL_REQUEST_COMMIT = "PULL_REQUEST_COMMIT"
    PULL_REQUEST_COMMIT_COMMENT_THREAD = "PULL_REQUEST_COMMIT_COMMENT_THREAD"
    PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW"
    PULL_REQUEST_REVIEW_THREAD = "PULL_REQUEST_REVIEW_THREAD"
    PULL_REQUEST_REVISION_MARKER = "PULL_REQUEST_REVISION_MARKER"
    READY_FOR_REVIEW_EVENT = "READY_FOR_REVIEW_EVENT"
    REFERENCED_EVENT = "REFERENCED_EVENT"
    REMOVED_FROM_MERGE_QUEUE_EVENT = "REMOVED_FROM_MERGE_QUEUE_EVENT"
    REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT"
    RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT"
    REOPENED_EVENT = "REOPENED_EVENT"
    REVIEW_DISMISSED_EVENT = "REVIEW_DISMISSED_EVENT"
    REVIEW_REQUESTED_EVENT = "REVIEW_REQUESTED_EVENT"
    REVIEW_REQUEST_REMOVED_EVENT = "REVIEW_REQUEST_REMOVED_EVENT"
    SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT"
    TRANSFERRED_EVENT = "TRANSFERRED_EVENT"
    UNASSIGNED_EVENT = "UNASSIGNED_EVENT"
    UNLABELED_EVENT = "UNLABELED_EVENT"
    UNLOCKED_EVENT = "UNLOCKED_EVENT"
    UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT"
    UNPINNED_EVENT = "UNPINNED_EVENT"
    UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT"
    USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT"


class PullRequestUpdateState(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class ReactionContent(str, Enum):
    CONFUSED = "CONFUSED"
    EYES = "EYES"
    HEART = "HEART"
    HOORAY = "HOORAY"
    LAUGH = "LAUGH"
    ROCKET = "ROCKET"
    THUMBS_DOWN = "THUMBS_DOWN"
    THUMBS_UP = "THUMBS_UP"


class ReactionOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class RefOrderField(str, Enum):
    ALPHABETICAL = "ALPHABETICAL"
    TAG_COMMIT_DATE = "TAG_COMMIT_DATE"


class ReleaseOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"


class RepoAccessAuditEntryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepoAddMemberAuditEntryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepoArchivedAuditEntryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepoChangeMergeSettingAuditEntryMergeType(str, Enum):
    MERGE = "MERGE"
    REBASE = "REBASE"
    SQUASH = "SQUASH"


class RepoCreateAuditEntryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepoDestroyAuditEntryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepoRemoveMemberAuditEntryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class ReportedContentClassifiers(str, Enum):
    ABUSE = "ABUSE"
    DUPLICATE = "DUPLICATE"
    OFF_TOPIC = "OFF_TOPIC"
    OUTDATED = "OUTDATED"
    RESOLVED = "RESOLVED"
    SPAM = "SPAM"


class RepositoryAffiliation(str, Enum):
    COLLABORATOR = "COLLABORATOR"
    ORGANIZATION_MEMBER = "ORGANIZATION_MEMBER"
    OWNER = "OWNER"


class RepositoryContributionType(str, Enum):
    COMMIT = "COMMIT"
    ISSUE = "ISSUE"
    PULL_REQUEST = "PULL_REQUEST"
    PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW"
    REPOSITORY = "REPOSITORY"


class RepositoryInteractionLimit(str, Enum):
    COLLABORATORS_ONLY = "COLLABORATORS_ONLY"
    CONTRIBUTORS_ONLY = "CONTRIBUTORS_ONLY"
    EXISTING_USERS = "EXISTING_USERS"
    NO_LIMIT = "NO_LIMIT"


class RepositoryInteractionLimitExpiry(str, Enum):
    ONE_DAY = "ONE_DAY"
    ONE_MONTH = "ONE_MONTH"
    ONE_WEEK = "ONE_WEEK"
    SIX_MONTHS = "SIX_MONTHS"
    THREE_DAYS = "THREE_DAYS"


class RepositoryInteractionLimitOrigin(str, Enum):
    ORGANIZATION = "ORGANIZATION"
    REPOSITORY = "REPOSITORY"
    USER = "USER"


class RepositoryInvitationOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class RepositoryLockReason(str, Enum):
    BILLING = "BILLING"
    MIGRATING = "MIGRATING"
    MOVING = "MOVING"
    RENAME = "RENAME"
    TRADE_RESTRICTION = "TRADE_RESTRICTION"


class RepositoryMigrationOrderDirection(str, Enum):
    ASC = "ASC"
    DESC = "DESC"


class RepositoryMigrationOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class RepositoryOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"
    PUSHED_AT = "PUSHED_AT"
    STARGAZERS = "STARGAZERS"
    UPDATED_AT = "UPDATED_AT"


class RepositoryPermission(str, Enum):
    ADMIN = "ADMIN"
    MAINTAIN = "MAINTAIN"
    READ = "READ"
    TRIAGE = "TRIAGE"
    WRITE = "WRITE"


class RepositoryPrivacy(str, Enum):
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepositoryRuleType(str, Enum):
    BRANCH_NAME_PATTERN = "BRANCH_NAME_PATTERN"
    COMMITTER_EMAIL_PATTERN = "COMMITTER_EMAIL_PATTERN"
    COMMIT_AUTHOR_EMAIL_PATTERN = "COMMIT_AUTHOR_EMAIL_PATTERN"
    COMMIT_MESSAGE_PATTERN = "COMMIT_MESSAGE_PATTERN"
    CREATION = "CREATION"
    DELETION = "DELETION"
    NON_FAST_FORWARD = "NON_FAST_FORWARD"
    PULL_REQUEST = "PULL_REQUEST"
    REQUIRED_DEPLOYMENTS = "REQUIRED_DEPLOYMENTS"
    REQUIRED_LINEAR_HISTORY = "REQUIRED_LINEAR_HISTORY"
    REQUIRED_SIGNATURES = "REQUIRED_SIGNATURES"
    REQUIRED_STATUS_CHECKS = "REQUIRED_STATUS_CHECKS"
    TAG_NAME_PATTERN = "TAG_NAME_PATTERN"
    UPDATE = "UPDATE"


class RepositoryRulesetBypassActorBypassMode(str, Enum):
    ALWAYS = "ALWAYS"
    PULL_REQUEST = "PULL_REQUEST"


class RepositoryRulesetTarget(str, Enum):
    BRANCH = "BRANCH"
    TAG = "TAG"


class RepositoryVisibility(str, Enum):
    INTERNAL = "INTERNAL"
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class RepositoryVulnerabilityAlertDependencyScope(str, Enum):
    DEVELOPMENT = "DEVELOPMENT"
    RUNTIME = "RUNTIME"


class RepositoryVulnerabilityAlertState(str, Enum):
    AUTO_DISMISSED = "AUTO_DISMISSED"
    DISMISSED = "DISMISSED"
    FIXED = "FIXED"
    OPEN = "OPEN"


class RequestableCheckStatusState(str, Enum):
    COMPLETED = "COMPLETED"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    QUEUED = "QUEUED"
    WAITING = "WAITING"


class RoleInOrganization(str, Enum):
    DIRECT_MEMBER = "DIRECT_MEMBER"
    OWNER = "OWNER"
    UNAFFILIATED = "UNAFFILIATED"


class RuleEnforcement(str, Enum):
    ACTIVE = "ACTIVE"
    DISABLED = "DISABLED"
    EVALUATE = "EVALUATE"


class SamlDigestAlgorithm(str, Enum):
    SHA1 = "SHA1"
    SHA256 = "SHA256"
    SHA384 = "SHA384"
    SHA512 = "SHA512"


class SamlSignatureAlgorithm(str, Enum):
    RSA_SHA1 = "RSA_SHA1"
    RSA_SHA256 = "RSA_SHA256"
    RSA_SHA384 = "RSA_SHA384"
    RSA_SHA512 = "RSA_SHA512"


class SavedReplyOrderField(str, Enum):
    UPDATED_AT = "UPDATED_AT"


class SearchType(str, Enum):
    DISCUSSION = "DISCUSSION"
    ISSUE = "ISSUE"
    REPOSITORY = "REPOSITORY"
    USER = "USER"


class SecurityAdvisoryClassification(str, Enum):
    GENERAL = "GENERAL"
    MALWARE = "MALWARE"


class SecurityAdvisoryEcosystem(str, Enum):
    ACTIONS = "ACTIONS"
    COMPOSER = "COMPOSER"
    ERLANG = "ERLANG"
    GO = "GO"
    MAVEN = "MAVEN"
    NPM = "NPM"
    NUGET = "NUGET"
    PIP = "PIP"
    PUB = "PUB"
    RUBYGEMS = "RUBYGEMS"
    RUST = "RUST"
    SWIFT = "SWIFT"


class SecurityAdvisoryIdentifierType(str, Enum):
    CVE = "CVE"
    GHSA = "GHSA"


class SecurityAdvisoryOrderField(str, Enum):
    PUBLISHED_AT = "PUBLISHED_AT"
    UPDATED_AT = "UPDATED_AT"


class SecurityAdvisorySeverity(str, Enum):
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    LOW = "LOW"
    MODERATE = "MODERATE"


class SecurityVulnerabilityOrderField(str, Enum):
    UPDATED_AT = "UPDATED_AT"


class SocialAccountProvider(str, Enum):
    FACEBOOK = "FACEBOOK"
    GENERIC = "GENERIC"
    HOMETOWN = "HOMETOWN"
    INSTAGRAM = "INSTAGRAM"
    LINKEDIN = "LINKEDIN"
    MASTODON = "MASTODON"
    REDDIT = "REDDIT"
    TWITCH = "TWITCH"
    TWITTER = "TWITTER"
    YOUTUBE = "YOUTUBE"


class SponsorOrderField(str, Enum):
    LOGIN = "LOGIN"
    RELEVANCE = "RELEVANCE"


class SponsorableOrderField(str, Enum):
    LOGIN = "LOGIN"


class SponsorsActivityAction(str, Enum):
    CANCELLED_SPONSORSHIP = "CANCELLED_SPONSORSHIP"
    NEW_SPONSORSHIP = "NEW_SPONSORSHIP"
    PENDING_CHANGE = "PENDING_CHANGE"
    REFUND = "REFUND"
    SPONSOR_MATCH_DISABLED = "SPONSOR_MATCH_DISABLED"
    TIER_CHANGE = "TIER_CHANGE"


class SponsorsActivityOrderField(str, Enum):
    TIMESTAMP = "TIMESTAMP"


class SponsorsActivityPeriod(str, Enum):
    ALL = "ALL"
    DAY = "DAY"
    MONTH = "MONTH"
    WEEK = "WEEK"


class SponsorsCountryOrRegionCode(str, Enum):
    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class SponsorsGoalKind(str, Enum):
    MONTHLY_SPONSORSHIP_AMOUNT = "MONTHLY_SPONSORSHIP_AMOUNT"
    TOTAL_SPONSORS_COUNT = "TOTAL_SPONSORS_COUNT"


class SponsorsListingFeaturedItemFeatureableType(str, Enum):
    REPOSITORY = "REPOSITORY"
    USER = "USER"


class SponsorsTierOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    MONTHLY_PRICE_IN_CENTS = "MONTHLY_PRICE_IN_CENTS"


class SponsorshipNewsletterOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class SponsorshipOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class SponsorshipPrivacy(str, Enum):
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"


class SquashMergeCommitMessage(str, Enum):
    BLANK = "BLANK"
    COMMIT_MESSAGES = "COMMIT_MESSAGES"
    PR_BODY = "PR_BODY"


class SquashMergeCommitTitle(str, Enum):
    COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
    PR_TITLE = "PR_TITLE"


class StarOrderField(str, Enum):
    STARRED_AT = "STARRED_AT"


class StatusState(str, Enum):
    ERROR = "ERROR"
    EXPECTED = "EXPECTED"
    FAILURE = "FAILURE"
    PENDING = "PENDING"
    SUCCESS = "SUCCESS"


class SubscriptionState(str, Enum):
    IGNORED = "IGNORED"
    SUBSCRIBED = "SUBSCRIBED"
    UNSUBSCRIBED = "UNSUBSCRIBED"


class TeamDiscussionCommentOrderField(str, Enum):
    NUMBER = "NUMBER"


class TeamDiscussionOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class TeamMemberOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    LOGIN = "LOGIN"


class TeamMemberRole(str, Enum):
    MAINTAINER = "MAINTAINER"
    MEMBER = "MEMBER"


class TeamMembershipType(str, Enum):
    ALL = "ALL"
    CHILD_TEAM = "CHILD_TEAM"
    IMMEDIATE = "IMMEDIATE"


class TeamNotificationSetting(str, Enum):
    NOTIFICATIONS_DISABLED = "NOTIFICATIONS_DISABLED"
    NOTIFICATIONS_ENABLED = "NOTIFICATIONS_ENABLED"


class TeamOrderField(str, Enum):
    NAME = "NAME"


class TeamPrivacy(str, Enum):
    SECRET = "SECRET"
    VISIBLE = "VISIBLE"


class TeamRepositoryOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    NAME = "NAME"
    PERMISSION = "PERMISSION"
    PUSHED_AT = "PUSHED_AT"
    STARGAZERS = "STARGAZERS"
    UPDATED_AT = "UPDATED_AT"


class TeamReviewAssignmentAlgorithm(str, Enum):
    LOAD_BALANCE = "LOAD_BALANCE"
    ROUND_ROBIN = "ROUND_ROBIN"


class TeamRole(str, Enum):
    ADMIN = "ADMIN"
    MEMBER = "MEMBER"


class ThreadSubscriptionFormAction(str, Enum):
    NONE = "NONE"
    SUBSCRIBE = "SUBSCRIBE"
    UNSUBSCRIBE = "UNSUBSCRIBE"


class ThreadSubscriptionState(str, Enum):
    DISABLED = "DISABLED"
    IGNORING_LIST = "IGNORING_LIST"
    IGNORING_THREAD = "IGNORING_THREAD"
    NONE = "NONE"
    SUBSCRIBED_TO_LIST = "SUBSCRIBED_TO_LIST"
    SUBSCRIBED_TO_THREAD = "SUBSCRIBED_TO_THREAD"
    SUBSCRIBED_TO_THREAD_EVENTS = "SUBSCRIBED_TO_THREAD_EVENTS"
    SUBSCRIBED_TO_THREAD_TYPE = "SUBSCRIBED_TO_THREAD_TYPE"
    UNAVAILABLE = "UNAVAILABLE"


class TopicSuggestionDeclineReason(str, Enum):
    NOT_RELEVANT = "NOT_RELEVANT"
    PERSONAL_PREFERENCE = "PERSONAL_PREFERENCE"
    TOO_GENERAL = "TOO_GENERAL"
    TOO_SPECIFIC = "TOO_SPECIFIC"


class TrackedIssueStates(str, Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class UserBlockDuration(str, Enum):
    ONE_DAY = "ONE_DAY"
    ONE_MONTH = "ONE_MONTH"
    ONE_WEEK = "ONE_WEEK"
    PERMANENT = "PERMANENT"
    THREE_DAYS = "THREE_DAYS"


class UserStatusOrderField(str, Enum):
    UPDATED_AT = "UPDATED_AT"


class VerifiableDomainOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"
    DOMAIN = "DOMAIN"


class WorkflowRunOrderField(str, Enum):
    CREATED_AT = "CREATED_AT"


class WorkflowState(str, Enum):
    ACTIVE = "ACTIVE"
    DELETED = "DELETED"
    DISABLED_FORK = "DISABLED_FORK"
    DISABLED_INACTIVITY = "DISABLED_INACTIVITY"
    DISABLED_MANUALLY = "DISABLED_MANUALLY"
